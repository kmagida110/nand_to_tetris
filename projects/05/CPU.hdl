// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Load A
    Mux16(a=instruction,b=ALUOut1,sel=instruction[15],out=ALoadVal);
    Not(in=instruction[15],out=NotInsFif);
    Or(a=NotInsFif,b=instruction[5],out=ALoad);
    Register(in=ALoadVal,load=ALoad,out[0..14]=addressM,out=AOut);
    
    // Load D
    And(a=instruction[4],b=instruction[15],out=DLoad);
    Register(in=ALUOut2,load=DLoad,out=DOut);

    // A or M
    Mux16(a=AOut,b=inM,sel=instruction[12],out=AMOut);

    // ALU Calculation
    ALU(x=DOut,y=AMOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUOut1,out=ALUOut2,zr=ZROut,ng=NGOut);
    
    // Write M
    And(a=instruction[3],b=instruction[15],out=writeM);

    // PC
    Not(in=ZROut,out=NotZero);
    Not(in=NGOut,out=NotNeg);

    //Jump if positive
    And(a=NotZero,b=NotNeg,out=PosNum);
    And(a=instruction[0],b=instruction[15],out=JumpIfPos);
    And(a=PosNum,b=JumpIfPos,out=jumpPos);

    // Jump if 0
    And3Way(a=ZROut,b=instruction[1],c=instruction[15],out=jumpZero);

    // Jump if neg
    And3Way(a=instruction[2],b=NGOut,c=instruction[15],out=jumpNeg);

    // Combine Jumps
    Or3Way(a=jumpPos,b=jumpZero,c=jumpNeg,out=jump);

    PC(in=AOut,load=jump,inc=true,reset=reset,out[0..14]=pc);

    

}