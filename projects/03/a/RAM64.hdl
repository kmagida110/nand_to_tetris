// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel=address[3..5],a=Aload,b=Bload,c=Cload,d=Dload,e=Eload,f=Fload,g=Gload,h=Hload);
    RAM8(in=in,load=Aload,address=address[0..2],out=Aout);
    RAM8(in=in,load=Bload,address=address[0..2],out=Bout);
    RAM8(in=in,load=Cload,address=address[0..2],out=Cout);
    RAM8(in=in,load=Dload,address=address[0..2],out=Dout);
    RAM8(in=in,load=Eload,address=address[0..2],out=Eout);
    RAM8(in=in,load=Fload,address=address[0..2],out=Fout);
    RAM8(in=in,load=Gload,address=address[0..2],out=Gout);
    RAM8(in=in,load=Hload,address=address[0..2],out=Hout);
    Mux8Way16(a=Aout,b=Bout,c=Cout,d=Dout,e=Eout,f=Fout,g=Gout,h=Hout,sel=address[3..5],out=out);
}