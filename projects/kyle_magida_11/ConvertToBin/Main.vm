function Main.main 2
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0
push constant 8000
call Memory.peek 1
pop local 1
push local 1
call Main.convert 1
pop temp 0
push constant 0
return
function Main.convert 3
push constant 0
not
pop local 2
label Main.convert.0.LOOP
push local 2
not
if-goto Main.convert.1.CONTINUE
push local 1
push constant 1
add
pop local 1
push local 0
call Main.nextMask 1
pop local 0
push constant 9000
push local 1
add
push local 0
call Memory.poke 2
pop temp 0
push local 1
push constant 16
gt
not
if-goto Main.convert.2.TRUE
goto Main.convert.3.FALSE
label Main.convert.2.TRUE
push argument 0
push local 0
and
push constant 0
eq
not
if-goto Main.convert.5.TRUE
goto Main.convert.6.FALSE
label Main.convert.5.TRUE
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
goto Main.convert.7.CONTINUE
label Main.convert.6.FALSE
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
label Main.convert.7.CONTINUE
goto Main.convert.4.CONTINUE
label Main.convert.3.FALSE
push constant 0
pop local 2
label Main.convert.4.CONTINUE
goto Main.convert.0.LOOP
label Main.convert.1.CONTINUE
push constant 0
return
function Main.nextMask 0
push argument 0
push constant 0
eq
if-goto Main.nextMask.0.TRUE
goto Main.nextMask.1.FALSE
label Main.nextMask.0.TRUE
push constant 1
return
goto Main.nextMask.2.CONTINUE
label Main.nextMask.1.FALSE
push argument 0
push constant 2
call Math.multiply 2
return
label Main.nextMask.2.CONTINUE
function Main.fillMemory 0
label Main.fillMemory.0.LOOP
push argument 1
push constant 0
gt
not
if-goto Main.fillMemory.1.CONTINUE
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
push argument 1
push constant 1
sub
pop argument 1
push argument 0
push constant 1
add
pop argument 0
goto Main.fillMemory.0.LOOP
label Main.fillMemory.1.CONTINUE
push constant 0
return
