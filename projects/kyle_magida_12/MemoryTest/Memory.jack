// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
    
    static int free;
    static int heapBase;

    /** Initializes memory parameters. */
    function void init() {

        let heapBase = 2048;
        let free = heapBase;
        return;

    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        var Array memory;
        var int val;

        let val = memory[address];
        return val;
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int pointer;
        let pointer = free;
        let free = free + size;
        if (free > 16383){
            do Output.printString("Memory overflow");
            do Sys.halt();
        }
        return pointer;

    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        return;
    }    
}
