function Math.init 0
push constant 15
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 0
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 0
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 0
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 0
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 0
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 0
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto Math.abs.0.TRUE
goto Math.abs.1.FALSE
label Math.abs.0.TRUE
push constant 0
push argument 0
sub
return
goto Math.abs.2.CONTINUE
label Math.abs.1.FALSE
push argument 0
return
label Math.abs.2.CONTINUE
function Math.multiply 4
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto Math.multiply.0.TRUE
goto Math.multiply.1.FALSE
label Math.multiply.0.TRUE
push constant 0
return
label Math.multiply.1.FALSE
push constant 0
pop local 0
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 3
push constant 0
pop local 2
label Math.multiply.3.LOOP
push local 2
push constant 15
lt
not
if-goto Math.multiply.4.CONTINUE
push local 3
push local 2
call Math.bit 2
if-goto Math.multiply.5.TRUE
goto Math.multiply.6.FALSE
label Math.multiply.5.TRUE
push local 0
push local 1
add
pop local 0
label Math.multiply.6.FALSE
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.multiply.3.LOOP
label Math.multiply.4.CONTINUE
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
or
if-goto Math.multiply.8.TRUE
goto Math.multiply.9.FALSE
label Math.multiply.8.TRUE
push constant 0
push local 0
sub
return
goto Math.multiply.10.CONTINUE
label Math.multiply.9.FALSE
push local 0
return
label Math.multiply.10.CONTINUE
function Math.bit 0
push argument 1
push static 0
add
pop pointer 1
push that 0
push argument 0
and
push argument 1
push static 0
add
pop pointer 1
push that 0
eq
if-goto Math.bit.0.TRUE
goto Math.bit.1.FALSE
label Math.bit.0.TRUE
push constant 0
not
return
goto Math.bit.2.CONTINUE
label Math.bit.1.FALSE
push constant 0
return
label Math.bit.2.CONTINUE
function Math.divide 2
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
or
if-goto Math.divide.0.TRUE
goto Math.divide.1.FALSE
label Math.divide.0.TRUE
push constant 0
not
pop local 1
goto Math.divide.2.CONTINUE
label Math.divide.1.FALSE
push constant 0
pop local 1
label Math.divide.2.CONTINUE
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
if-goto Math.divide.3.TRUE
goto Math.divide.4.FALSE
label Math.divide.3.TRUE
push constant 0
return
label Math.divide.4.FALSE
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto Math.divide.6.TRUE
goto Math.divide.7.FALSE
label Math.divide.6.TRUE
push local 1
if-goto Math.divide.9.TRUE
goto Math.divide.10.FALSE
label Math.divide.9.TRUE
push constant 0
push constant 2
push local 0
call Math.multiply 2
sub
return
goto Math.divide.11.CONTINUE
label Math.divide.10.FALSE
push constant 2
push local 0
call Math.multiply 2
return
label Math.divide.11.CONTINUE
goto Math.divide.8.CONTINUE
label Math.divide.7.FALSE
push local 1
if-goto Math.divide.12.TRUE
goto Math.divide.13.FALSE
label Math.divide.12.TRUE
push constant 0
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
sub
return
goto Math.divide.14.CONTINUE
label Math.divide.13.FALSE
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label Math.divide.14.CONTINUE
label Math.divide.8.CONTINUE
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label Math.sqrt.0.LOOP
push local 1
push constant 1
neg
gt
not
if-goto Math.sqrt.1.CONTINUE
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto Math.sqrt.2.TRUE
goto Math.sqrt.3.FALSE
label Math.sqrt.2.TRUE
push local 2
pop local 0
label Math.sqrt.3.FALSE
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt.0.LOOP
label Math.sqrt.1.CONTINUE
push local 0
return
function Math.max 0
push argument 0
push argument 1
lt
if-goto Math.max.0.TRUE
goto Math.max.1.FALSE
label Math.max.0.TRUE
push argument 1
return
goto Math.max.2.CONTINUE
label Math.max.1.FALSE
push argument 0
return
label Math.max.2.CONTINUE
function Math.min 0
push argument 0
push argument 1
lt
if-goto Math.min.0.TRUE
goto Math.min.1.FALSE
label Math.min.0.TRUE
push argument 0
return
goto Math.min.2.CONTINUE
label Math.min.1.FALSE
push argument 1
return
label Math.min.2.CONTINUE
